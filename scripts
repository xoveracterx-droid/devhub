

local Window = DevHub3:CreateWindow({
    Name = "Dev Hub",
    Icon = 0,
    LoadingTitle = "Garden Pet Hub",
    LoadingSubtitle = "by dev",
    ShowText = "dev",
    Theme = "Default",
    ToggleUIKeybind = "K",
    DisableDevHub3Prompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Dev Hub"
    }
})

local PlayerTab = Window:CreateTab("Player", nil)  
local VisualTab = Window:CreateTab("Visual", nil) 

local player = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

DevHub3:Notify({
    Title = "Success",
    Content = "Welcome, " .. player.Name,
    Duration = 5,
    Image = nil,
})



PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {0, 100},
    Increment = 5,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "WalkSpeed",
    Callback = function(val)
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = val
        end
    end,
})


local infiniteJump = false
PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "InfiniteJump",
    Callback = function(state)
        infiniteJump = state
    end,
})
UIS.JumpRequest:Connect(function()
    if infiniteJump then
        local char = player.Character or player.CharacterAdded:Wait()
        local humanoid = char:FindFirstChildWhichIsA("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)


local noclip = false
PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(state)
        noclip = state
    end,
})
RunService.Stepped:Connect(function()
    if noclip and player.Character then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end
end)


local flying = false
local flySpeed = 3
local bodyGyro, bodyVelocity, bodyVelocityConnection

PlayerTab:CreateSlider({
    Name = "Fly Speed",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = flySpeed,
    Flag = "FlySpeedSlider",
    Callback = function(value)
        flySpeed = value
    end,
})

PlayerTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Flag = "FlyToggle",
    Callback = function(state)
        flying = state
        local character = player.Character or player.CharacterAdded:Wait()
        local root = character:WaitForChild("HumanoidRootPart")

        if flying then
            bodyGyro = Instance.new("BodyGyro", root)
            bodyGyro.P = 9e4
            bodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            bodyGyro.cframe = root.CFrame

            bodyVelocity = Instance.new("BodyVelocity", root)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)

            bodyVelocityConnection = RunService.RenderStepped:Connect(function()
                if flying then
                    local move = Vector3.zero
                    if UIS:IsKeyDown(Enum.KeyCode.W) then move = move + workspace.CurrentCamera.CFrame.LookVector end
                    if UIS:IsKeyDown(Enum.KeyCode.S) then move = move - workspace.CurrentCamera.CFrame.LookVector end
                    if UIS:IsKeyDown(Enum.KeyCode.A) then move = move - workspace.CurrentCamera.CFrame.RightVector end
                    if UIS:IsKeyDown(Enum.KeyCode.D) then move = move + workspace.CurrentCamera.CFrame.RightVector end
                    if UIS:IsKeyDown(Enum.KeyCode.Space) then move = move + Vector3.new(0, 1, 0) end
                    if UIS:IsKeyDown(Enum.KeyCode.LeftControl) then move = move - Vector3.new(0, 1, 0) end

                    if move.Magnitude > 0 then
                        bodyVelocity.Velocity = move.Unit * flySpeed * 30
                    else
                        bodyVelocity.Velocity = Vector3.zero
                    end
                    bodyGyro.CFrame = workspace.CurrentCamera.CFrame
                end
            end)
        else
            if bodyGyro then bodyGyro:Destroy() end
            if bodyVelocity then bodyVelocity:Destroy() end
            if bodyVelocityConnection then bodyVelocityConnection:Disconnect() end
        end
    end,
})



local espEnabled = false
local espBoxes = {}

local function removeESPForPlayer(plr)
    if espBoxes[plr] then
        if espBoxes[plr].box then espBoxes[plr].box:Destroy() end
        if espBoxes[plr].name then espBoxes[plr].name:Destroy() end
        espBoxes[plr] = nil
    end
end

local function createESPForPlayer(plr)
    if plr == player then return end
    local char = plr.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        removeESPForPlayer(plr)

        local box = Instance.new("BoxHandleAdornment")
        box.Name = "ESPBox"
        box.Adornee = char.HumanoidRootPart
        box.AlwaysOnTop = true
        box.ZIndex = 5
        box.Size = Vector3.new(4, 6, 2)
        box.Color3 = Color3.fromRGB(255, 0, 0)
        box.Transparency = 0.5
        box.Parent = char
        espBoxes[plr] = {box = box}

        local billboard = Instance.new("BillboardGui")
        billboard.Name = "ESPName"
        billboard.Adornee = char.HumanoidRootPart
        billboard.Size = UDim2.new(0, 200, 0, 50)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true

        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = plr.Name
        nameLabel.TextColor3 = Color3.new(1, 1, 1)
        nameLabel.TextStrokeTransparency = 0.2
        nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextScaled = true
        nameLabel.Parent = billboard

        billboard.Parent = char
        espBoxes[plr].name = billboard
    end
end

VisualTab:CreateToggle({
    Name = "Player ESP",
    CurrentValue = true,
    Flag = "ESP",
    Callback = function(state)
        espEnabled = state
        if espEnabled then
            for _, plr in pairs(game.Players:GetPlayers()) do
                if plr ~= player then
                    createESPForPlayer(plr)
                    plr.CharacterAdded:Connect(function()
                        task.wait(1)
                        if espEnabled then
                            createESPForPlayer(plr)
                        end
                    end)
                end
            end
            game.Players.PlayerAdded:Connect(function(plr)
                plr.CharacterAdded:Connect(function()
                    task.wait(1)
                    if espEnabled then
                        createESPForPlayer(plr)
                    end
                end)
            end)
            game.Players.PlayerRemoving:Connect(function(plr)
                removeESPForPlayer(plr)
            end)
        else
            for _, plr in pairs(game.Players:GetPlayers()) do
                removeESPForPlayer(plr)
            end
        end
    end,
})


local autoLock = true
local autoLockConnection

VisualTab:CreateToggle({
    Name = "Auto Lock",
    CurrentValue = false,
    Flag = "AutoLockToggle",
    Callback = function(state)
        autoLock = state
        if autoLock then
            autoLockConnection = RunService.RenderStepped:Connect(function()
                local character = player.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    local root = character.HumanoidRootPart
                    local closestPlayer
                    local shortestDistance = math.huge

                    for _, plr in pairs(game.Players:GetPlayers()) do
                        if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                            local targetRoot = plr.Character.HumanoidRootPart
                            local dist = (targetRoot.Position - root.Position).Magnitude
                            if dist < shortestDistance then
                                shortestDistance = dist
                                closestPlayer = plr
                            end
                        end
                    end

                    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        local targetPos = closestPlayer.Character.HumanoidRootPart.Position
                        local rootPos = root.Position
                        local direction = (targetPos - rootPos).Unit
                        root.CFrame = CFrame.new(rootPos, rootPos + Vector3.new(direction.X, 0, direction.Z)) -- Rotate to face target horizontally
                    end
                end
            end)
        else
            if autoLockConnection then
                autoLockConnection:Disconnect()
                autoLockConnection = nil
            end
        end
    end,
})


UIS.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.Q then
        autoLock = not autoLock
        VisualTab.Flags.AutoLockToggle:Set(autoLock)
    end
end)
